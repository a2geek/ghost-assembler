<?xml version="1.0" encoding="UTF-8"?>
<!-- Definition for the WDC 65C02. -->
<definition xmlns="https://a2geek/schemas/cpu-definition/2.1"
			xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
			xsi:schemaLocation="https://a2geek/schemas/cpu-definition/2.1 ../schemas/cpu-definition-2.1.xsd">

	<name>RCVM2</name>
	<overview>
	<![CDATA[
		<p>
		The Recreational Compiler Virtual Machine is stack-based.  RCVM is not a pure stack machine, 
		in that variables can be indexed into the stack. The stack is used for temporary storage 
		and mostly removes the need for registers.
		</p>

		<p>
		With V2 of the VM, changes include:
		<ul>
		<li>One stack.</li>
		<li>Changes in call sequence (CALL vs GOSUB)</li>
		<li>ability to reserve space for locals (RESERVE)</li>
		<li>ability to access variables [local, parameters, return value] on stack (VLOAD, VSTORE)</li>
		<li>VLOAD/VSTORE with negative value goes before frame (local variables), negative values are after frame 
		    (parameters and return value).  NOTE: these are two different starting addresses -- if a frame is 6 bytes, 
		    negative values are from before byte #1 and positive values (including zero) are from after byte #6.</li>
		<li>current CALL is renamed NCALL for NATIVE call</li>
		<li>NATIVE call needs to be enhanced to allow storing of A/X/Y registers on stack</li>
		<li>RETURN handles call sequence. Note that RETURN must be careful when restoring SP.</li>
		<li>Push zeroes onto the stack (PUSHZ) to initialize up to 256 bytes of stack.</li>
		<li>CALL handles new calling sequence (PC/SP/FP/BP/LP).  Note that CALL must be careful when storing SP.</li>
		<li>Removed IFEQ/IFNE/IFLT/IFLE/IFGT/IFGE and replaced with EQ/NE/LT/LE/GT/GE and an IFTRUE/IFFALSE.</li>
		<li>Removed IFPLUS/IFMINUS.</li>
		</ul>
		</p>
		
		<p>
		Implementation changes in V2 of the interpreter:
		<ul>
		<li>Break apart source into multiple files.</li>
		<li>Add bit 0 (push WORK1) to control structure.</li>
		<li>Write specific routines for pushing WORK0 and WORK1 (should be a little faster).</li>
		</ul>
		</p>
	]]>
	</overview>

	<output-format>
		<header>
			<!-- Magic bytes 'RCVM' (high-bit set) -->
			<byte>'R'|0x80</byte>
			<byte>'C'|0x80</byte>
			<byte>'V'|0x80</byte>
			<byte>'M'|0x80</byte>
			<!-- RCVM version number -->
			<byte>0x02</byte>
			<!-- Stack size set to 0x1cf for Apple II interpreter -->
			<byte>0xcf</byte>
			<byte>0x01</byte>
		</header>
	</output-format>
	
	<address-space bit-size="16" />

	<address-modes>
		<address-mode id="none">
			<title>No addressing mode</title>
			<description>
			</description>
			<code>
				<byte>opcode</byte>
			</code>
		</address-mode>
		<address-mode id="const-8-bit">
			<title>8-bit value</title>
			<description>
				Instruction includes an 8-bit value which may be used for a count value or as a constant
				to be loaded onto the stack.
			</description>
			<format>n</format>
			<regex>([:expr:]+)</regex>
			<constraint><![CDATA[n >= 0x0 && n <= 0xff]]></constraint>
			<code>
				<byte>opcode</byte>
				<byte>n</byte>
			</code>
		</address-mode>
		<address-mode id="const-16-bit">
			<title>16-bit address or value</title>
			<description>
				Instruction includes a 16-bit address or value which is used for a branch target or as a constant
				to be loaded onto the stack.
			</description>
			<format>addr</format>
			<regex>([:expr:]+)</regex>
			<constraint><![CDATA[addr >= 0x0 && addr <= 0xffff]]></constraint>
			<code>
				<byte>opcode</byte>
				<byte>addr</byte>
				<byte>addr>>8</byte>
			</code>
		</address-mode>
		<address-mode id="const-32-bit">
			<title>32-bit value</title>
			<description>
				Instruction includes a 32-bit constant value which is loaded onto the stack.
			</description>
			<format>addr</format>
			<regex>([:expr:]+)</regex>
			<constraint><![CDATA[addr >= 0x0 && addr <= 0xffffffff]]></constraint>
			<code>
				<byte>opcode</byte>
				<byte>addr</byte>
				<byte>addr>>8</byte>
				<byte>addr>>16</byte>
				<byte>addr>>24</byte>
			</code>
		</address-mode>
		<address-mode id="const-float">
			<title>Floating point value</title>
			<description>
				Instruction includes a floating point value.  Currently hard-wired at 40 bits based on Apple II
				interpreter.
			</description>
			<format>value</format>
			<regex>([:expr:]+)</regex>
			<code>
				<byte>opcode</byte>
				<byte>value</byte>
				<byte>value>>8</byte>
				<byte>value>>16</byte>
				<byte>value>>24</byte>
				<byte>value>>32</byte>
			</code>
		</address-mode>
		<address-mode id="ncall">
			<title>Native Call operation</title>
			<description>
				NCALL (Native Call) has its own specific address mode.
			</description>
			<format>addr,ctrl</format>
			<regex>([:expr:]+),[\s]*([:expr:]+)</regex>
			<constraint><![CDATA[addr >= 0x0 && addr <= 0xffff && ctrl >= 0x0 && ctrl <= 0xff]]></constraint>
			<code>
				<byte>opcode</byte>
				<byte>addr</byte>
				<byte>addr>>8</byte>
				<byte>ctrl</byte>
			</code>
		</address-mode>
		<address-mode id="int-float-n">
			<title>Integer/Floating point instruction with 8-bit offset</title>
			<description>
				An instruction that both supports integer data types (8, 16, 32)
				and floating point stack operations.  An 8-bit offset is included
				for branching.
			</description>
			<mnemonic-format>.+([124F])</mnemonic-format>
			<format>n</format>
			<regex>([:expr:]+)</regex>
			<constraint><![CDATA[n >= 0x0 && n <= 0xff]]></constraint>
			<code>
				<byte mnemonic-match="1">opcode | 0x0</byte>
				<byte mnemonic-match="2">opcode | 0x1</byte>
				<byte mnemonic-match="4">opcode | 0x2</byte>
				<byte mnemonic-match="F">opcode | 0x3</byte>
				<byte>n</byte>
			</code>
		</address-mode>
		<address-mode id="int-float-addr">
			<title>Integer/Floating point instruction with 16-bit address</title>
			<description>
				An instruction that both supports integer data types (8, 16, 32)
				and floating point stack operations.  A 16-bit address follows that indicates
				the address impacted.
			</description>
			<mnemonic-format>.+([124F])</mnemonic-format>
			<format>addr</format>
			<regex>([:expr:]+)</regex>
			<constraint><![CDATA[addr >= 0x0 && addr <= 0xffff]]></constraint>
			<code>
				<byte mnemonic-match="1">opcode | 0x0</byte>
				<byte mnemonic-match="2">opcode | 0x1</byte>
				<byte mnemonic-match="4">opcode | 0x2</byte>
				<byte mnemonic-match="F">opcode | 0x3</byte>
				<byte>addr</byte>
				<byte>addr>>8</byte>
			</code>
		</address-mode>
		<address-mode id="int-float">
			<title>Integer/Floating point instruction</title>
			<description>
				An instruction that both supports integer data types (8, 16, 32)
				and floating point stack operations.
			</description>
			<mnemonic-format>.+([124F])</mnemonic-format>
			<code>
				<byte mnemonic-match="1">opcode | 0x0</byte>
				<byte mnemonic-match="2">opcode | 0x1</byte>
				<byte mnemonic-match="4">opcode | 0x2</byte>
				<byte mnemonic-match="F">opcode | 0x3</byte>
			</code>
		</address-mode>
		<address-mode id="int-float-2">
			<title>Two Integer/Floating point instruction</title>
			<description>
				An instruction that both supports TWO integer data types (8, 16, 32)
				or floating point stack operations.
			</description>
			<mnemonic-format>.+([124F]{2})</mnemonic-format>
			<code>
				<byte mnemonic-match="11">opcode | 0x0</byte>
				<byte mnemonic-match="12">opcode | 0x1</byte>
				<byte mnemonic-match="14">opcode | 0x2</byte>
				<byte mnemonic-match="1F">opcode | 0x3</byte>
				<byte mnemonic-match="21">opcode | 0x4</byte>
				<byte mnemonic-match="22">opcode | 0x5</byte>
				<byte mnemonic-match="24">opcode | 0x6</byte>
				<byte mnemonic-match="2F">opcode | 0x7</byte>
				<byte mnemonic-match="41">opcode | 0x8</byte>
				<byte mnemonic-match="42">opcode | 0x9</byte>
				<byte mnemonic-match="44">opcode | 0xa</byte>
				<byte mnemonic-match="4F">opcode | 0xb</byte>
				<byte mnemonic-match="F1">opcode | 0xc</byte>
				<byte mnemonic-match="F2">opcode | 0xd</byte>
				<byte mnemonic-match="F4">opcode | 0xe</byte>
				<byte mnemonic-match="FF">opcode | 0xf</byte>
			</code>
		</address-mode>
		<address-mode id="int-only">
			<title>Integer-only instruction</title>
			<description>
				An instruction that both supports only integer data types (8, 16, 32).
			</description>
			<mnemonic-format>.+([124])</mnemonic-format>
			<code>
				<byte mnemonic-match="1">opcode | 0x0</byte>
				<byte mnemonic-match="2">opcode | 0x1</byte>
				<byte mnemonic-match="4">opcode | 0x2</byte>
			</code>
		</address-mode>
		<address-mode id="int-addr">
			<title>Integer point instruction with 16-bit address</title>
			<description>
				An instruction that supports integer data types (8, 16, 32).
				A 16-bit address follows that indicates the address impacted.
			</description>
			<mnemonic-format>.+([124])</mnemonic-format>
			<format>addr</format>
			<regex>([:expr:]+)</regex>
			<constraint><![CDATA[addr >= 0x0 && addr <= 0xffff]]></constraint>
			<code>
				<byte mnemonic-match="1">opcode | 0x0</byte>
				<byte mnemonic-match="2">opcode | 0x1</byte>
				<byte mnemonic-match="4">opcode | 0x2</byte>
				<byte>addr</byte>
				<byte>addr>>8</byte>
			</code>
		</address-mode>
	</address-modes>

	<operations>
		<operation>
			<mnemonic>EXIT</mnemonic>
			<description>Shut down VM.</description>
			<addressing-mode ref="none" opcode="0x00" />
		</operation>
		<operation>
			<mnemonic>GOTO</mnemonic>
			<description>Goto the specified address.</description>
			<addressing-mode ref="const-16-bit" opcode="0x01" />
		</operation>
		<operation>
			<mnemonic>CALL</mnemonic>
			<description>Call subroutine at addr, parameters on stack. Pushes SP, FP, PC onto stack</description>
			<addressing-mode ref="const-16-bit" opcode="0x02" />
		</operation>
		<operation>
			<mnemonic>RETURN</mnemonic>
			<description>Return from subroutine, any return value left on stack. Restores SP, FP, PC from stack</description>
			<addressing-mode ref="none" opcode="0x03" />
		</operation>
		<operation>
			<mnemonic>NCALL</mnemonic>
			<description>
			<![CDATA[
				Call native subroutine at physical address addr. Control byte identifies processor-specific information.
				For 6502/65C02:
				<ul>
				<li>7 - Pop Acc. from stack</li>
				<li>6 - Pop X register from stack</li>
				<li>5 - Pop Y register from stack</li>
				<li>4 - Push Acc. onto stack</li>
				<li>3 - Push X register onto stack</li>
				<li>2 - Push Y register onto stack</li>
				<li>1 - undefined</li>
				<li>0 - undefined</li>
				</ul>
			]]>
			</description>
			<addressing-mode ref="ncall" opcode="0x04" />
		</operation>
		<operation>
			<mnemonic>RESERVE</mnemonic>
			<description>Reserves n bytes of local space on stack.</description>
			<addressing-mode ref="const-8-bit" opcode="0x05" />
		</operation>
		<operation>
			<mnemonic>PUSHZ</mnemonic>
			<description>
				( -- 0... )
				Push zeroes onto the stack.
			</description>
			<addressing-mode ref="const-8-bit" opcode="0x06" />
		</operation>
		<operation>
			<mnemonic>IFTRUE</mnemonic>
			<description>
				( a -- )
				If a is true (non-zero) goto address.
			</description>
			<addressing-mode ref="const-16-bit" opcode="0x0e" />
		</operation>
		<operation>
			<mnemonic>IFFALSE</mnemonic>
			<description>
				( a -- )	
				If a is false (zero) goto address.
			</description>
			<addressing-mode ref="const-16-bit" opcode="0x0f" />
		</operation>
		<operation>
			<mnemonic>MLOAD</mnemonic>
			<description>
				( -- n )	
				Load a value from physical memory.
			</description>
			<addressing-mode ref="int-float-addr" opcode="0x10" />
		</operation>
		<operation>
			<mnemonic>MSTORE</mnemonic>
			<description>
				( n -- )	
				Store a value to physical memory.
			</description>
			<addressing-mode ref="int-float-addr" opcode="0x14" />
		</operation>
		<operation>
			<mnemonic>DROP</mnemonic>
			<description>
				( n -- )	
				Drop a value from the stack.
			</description>
			<addressing-mode ref="int-float" opcode="0x18" />
		</operation>
		<operation>
			<mnemonic>SWAP</mnemonic>
			<description>
				( a b -- b a )
				Swap the top two values on the stack.
			</description>
			<addressing-mode ref="int-float" opcode="0x1c" />
		</operation>
		<operation>
			<mnemonic>ADD</mnemonic>
			<description>
				( a b -- c )
				Add the top two numbers
			</description>
			<addressing-mode ref="int-float" opcode="0x20" />
		</operation>
		<operation>
			<mnemonic>SUB</mnemonic>
			<description>
				( a b -- c )
				Subtract the top two numbers
			</description>
			<addressing-mode ref="int-float" opcode="0x24" />
		</operation>
		<operation>
			<mnemonic>MULS</mnemonic>
			<description>
				( a b -- c )
				Signed multiplication of the top two numbers.
			</description>
			<addressing-mode ref="int-float" opcode="0x28" />
		</operation>
		<operation>
			<mnemonic>DIVS</mnemonic>
			<description>
				( a b -- c )	
				Signed division of the top two numbers.
			</description>
			<addressing-mode ref="int-float" opcode="0x2c" />
		</operation>
		<operation>
			<mnemonic>MODS</mnemonic>
			<description>
				( a b -- c )	
				Signed modulus of the top two numbers.
			</description>
			<addressing-mode ref="int-float" opcode="0x30" />
		</operation>
		<operation>
			<mnemonic>MULU</mnemonic>
			<description>
				( a b -- c )	
				Unsigned multiplication of the top two numbers.  Does not include float.
			</description>
			<addressing-mode ref="int-float" opcode="0x34" />
		</operation>
		<operation>
			<mnemonic>DIVU</mnemonic>
			<description>
				( a b -- c )	
				Unsigned division of the top two numbers. Does not include float.
			</description>
			<addressing-mode ref="int-float" opcode="0x38" />
		</operation>
		<operation>
			<mnemonic>MODU</mnemonic>
			<description>
				( a b -- c )
				Unsigned modulus of the top two numbers.
			</description>
			<addressing-mode ref="int-float" opcode="0x3c" />
		</operation>
		<operation>
			<mnemonic>INC</mnemonic>
			<description>
				( a -- a+1 )
				Increment by one.
			</description>
			<addressing-mode ref="int-float" opcode="0x40" />
		</operation>
		<operation>
			<mnemonic>DEC</mnemonic>
			<description>
				( a -- a-1 )
				Decrement by one.
			</description>
			<addressing-mode ref="int-float" opcode="0x44" />
		</operation>
		<operation>
			<mnemonic>NEG</mnemonic>
			<description>
				( a -- -a )
				(Signed) Negate number.
			</description>
			<addressing-mode ref="int-float" opcode="0x48" />
		</operation>
		<operation>
			<mnemonic>EQ</mnemonic>
			<description>
				( a b -- tf )
				a == b 
			</description>
			<addressing-mode ref="int-float" opcode="0x4c" />
		</operation>
		<operation>
			<mnemonic>NE</mnemonic>
			<description>
				( a b -- tf )
				a &lt;&gt; b 
			</description>
			<addressing-mode ref="int-float" opcode="0x50" />
		</operation>
		<operation>
			<mnemonic>LT</mnemonic>
			<description>
				( a b -- tf )
				a &lt; b 
			</description>
			<addressing-mode ref="int-float" opcode="0x54" />
		</operation>
		<operation>
			<mnemonic>LE</mnemonic>
			<description>
				( a b -- tf )
				a &lt;= b 
			</description>
			<addressing-mode ref="int-float" opcode="0x58" />
		</operation>
		<operation>
			<mnemonic>GT</mnemonic>
			<description>
				( a b -- tf )
				a &gt; b 
			</description>
			<addressing-mode ref="int-float" opcode="0x5c" />
		</operation>
		<operation>
			<mnemonic>GE</mnemonic>
			<description>
				( a b -- tf )
				a &gt;= b 
			</description>
			<addressing-mode ref="int-float" opcode="0x60" />
		</operation>
		<operation>
			<mnemonic>SLOAD</mnemonic>
			<description>
				( addr -- n )
				Load a value from physical memory using address on stack.
			</description>
			<addressing-mode ref="int-float" opcode="0x64" />
		</operation>
		<operation>
			<mnemonic>SSTORE</mnemonic>
			<description>
				( n addr -- )
				Store a value to physical memory using address on stack.
			</description>
			<addressing-mode ref="int-float" opcode="0x68" />
		</operation>
		<operation>
			<mnemonic>OR</mnemonic>
			<description>
				( a b -- c )
				Bit-wise OR
			</description>
			<addressing-mode ref="int-float" opcode="0x74" />
		</operation>
		<operation>
			<mnemonic>AND</mnemonic>
			<description>
				( a b -- c )
				Bit-wise AND
			</description>
			<addressing-mode ref="int-float" opcode="0x78" />
		</operation>
		<operation>
			<mnemonic>XOR</mnemonic>
			<description>
				( a b -- c )
				Bit-wise exclusive-OR
			</description>
			<addressing-mode ref="int-float" opcode="0x7c" />
		</operation>
		<operation>
			<mnemonic>SHL</mnemonic>
			<description>
				( a -- a' )
				Shift bits left
			</description>
			<addressing-mode ref="int-float" opcode="0x80" />
		</operation>
		<operation>
			<mnemonic>SHR</mnemonic>
			<description>
				( a -- a’ )
				Shift bits right
			</description>
			<addressing-mode ref="int-float" opcode="0x84" />
		</operation>
		<operation>
			<mnemonic>DUP</mnemonic>
			<description>
				( n -- n n )
				Duplicate the top item on the stack.
			</description>
			<addressing-mode ref="int-float" opcode="0x88" />
		</operation>
		<operation>
			<mnemonic>CONST1</mnemonic>
			<description>
				( -- n )	
				Push a constant value.
			</description>
			<addressing-mode ref="const-8-bit" opcode="0x8c" />
		</operation>
		<operation>
			<mnemonic>CONST2</mnemonic>
			<description>
				( -- n )	
				Push a constant value.
			</description>
			<addressing-mode ref="const-16-bit" opcode="0x8d" />
		</operation>
		<operation>
			<mnemonic>CONST4</mnemonic>
			<description>
				( -- n )	
				Push a constant value.
			</description>
			<addressing-mode ref="const-32-bit" opcode="0x8e" />
		</operation>
		<operation>
			<mnemonic>CONSTF</mnemonic>
			<description>
				( -- n )	
				Push a constant value.
			</description>
			<addressing-mode ref="const-float" opcode="0x8f" />
		</operation>
		<operation>
			<mnemonic>DECJNZ</mnemonic>
			<description>
				( n -- n-1 )
				Decrement TOS by 1, branch to address if not zero.
			</description>
			<addressing-mode ref="int-addr" opcode="0x90" />
		</operation>
		<operation>
			<mnemonic>DIVMODS</mnemonic>
			<description>
				( a b -- mod div )
				Signed division and modulus of the top two numbers.
			</description>
			<addressing-mode ref="int-float" opcode="0x94" />
		</operation>
		<operation>
			<mnemonic>DIVMODU</mnemonic>
			<description>
				( a b -- mod div )
				Unsigned division and modulus of the top two numbers.
			</description>
			<addressing-mode ref="int-only" opcode="0x98" />
		</operation>
		<operation>
			<mnemonic>CONVS</mnemonic>
			<description>
			<![CDATA[
				Convert number from type "a" to type "b".
				<ul>
				<li>signed conversion a &hArr; b
				<li>sign extension: 1>2, 1>4, 2>4
				<li>truncation: 2>1, 4>2, 4>1
				<li>signed to float: 1>F, 2>F, 4>F
				<li>float to signed: F>1, F>2, F>4
				<li>unsigned to signed: 1>1, 2>2, 4>4
				<li>undefined: F>F
				</ul> 
			]]>
			</description>
			<addressing-mode ref="int-float-2" opcode="0xa0" />
		</operation>
		<operation>
			<mnemonic>CONVU</mnemonic>
			<description>
			<![CDATA[
				Convert number from type "a" to type "b".
				<ul>
				<li>unsigned conversion a &hArr; b</li>
				<li>zero extension: 1>2, 1>4, 2>4</li>
				<li>truncation: 2>1, 4>2, 4>1</li>
				<li>unsigned to float: 1>F, 2>F, 4>F</li>
				<li>float to unsigned: F>1, F>2, F>4</li>
				<li>signed to unsigned: 1>1, 2>2, 4>4</li>
				<li>undefined: F>F</li>
				</ul>
			]]>
			</description>
			<addressing-mode ref="int-float-2" opcode="0xb0" />
		</operation>
		<operation>
			<mnemonic>VLOAD</mnemonic>
			<description>
				( -- n )
				Load variable value onto stack.
			</description>
			<addressing-mode ref="int-float-n" opcode="0xc0" />
		</operation>
		<operation>
			<mnemonic>VSTORE</mnemonic>
			<description>
				( n -- )
				Store value from stack into variable space.
			</description>
			<addressing-mode ref="int-float-n" opcode="0xc4" />
		</operation>
	</operations>
</definition>