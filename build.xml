<?xml version="1.0" encoding="UTF-8"?>
<!-- ======================================================================
	 Assembler build file.  To be used by Hudson-CI.
	 
	 Targets:
	     clean
	     init
	     build
	     schemagen	     << independent task to build XML schema
	     test
	     dist            << default
	     dist-clean
	 
	 Directories:
	     build/          << JUnit test results
	           classes/  << Compiled project classes
	           tests/    << Compiled test classes
	           javadoc/  << Generated javadoc site
	           site/     << Generated documentation site
	     dist/           << Distribution JARs
	 
	 Generally following:  http://wiki.apache.org/ant/TheElementsOfAntStyle
     ====================================================================== -->
<project name="Assembler" default="dist">
	<property name="build.version" value="2.0" />
	<property name="project.name" value="Assembler" />
	<property name="build.dir" value="build" />
	<property name="build.classes" value="${build.dir}/classes" />
	<property name="build.tests" value="${build.dir}/tests" />
	<property name="build.javadoc" value="${build.dir}/javadoc" />
	<property name="build.site" value="${build.dir}/site" />
	<property name="dist.dir" value="dist" />
	<property name="cpu.package" value="com/webcodepro/asm/definitions" />

	<!-- Set properties dynamically based if we see Hudson's WORKSPACE environment variable or not -->
	<property environment="env" />
	<tstamp />
	<condition property="build.id" 
		       value="r${env.SVN_REVISION}-b${env.BUILD_NUMBER}" 
		       else="SNAPSHOT-${DSTAMP}.${TSTAMP}">
		<and>
			<isset property="env.SVN_REVISION" />
			<isset property="env.BUILD_NUMBER" />
		</and>
	</condition>
	<echo message="build.id = ${build.id}" />

	<path id="compile.path">
		<fileset dir="lib">
			<include name="*.jar" />
		</fileset>
		<fileset dir="test_lib" includes="*.jar" />
		<pathelement path="${build.classes}" />
		<pathelement path="${build.tests}" />
	</path>
	<echo message="compile.path = ${toString:compile.path}" />
	
    <taskdef name="one-jar" 
    	     classname="com.simontuffs.onejar.ant.OneJarTask" 
             classpath="compile_lib/one-jar-ant-task-0.97.jar" 
    	     onerror="report"
             />
	
	<target name="clean" description="Clean up build directories">
		<delete dir="${build.dir}" />
	</target>

	<target name="init" depends="clean" description="Create build and distribution directories">
		<mkdir dir="${build.dir}" />
		<mkdir dir="${build.classes}" />
		<mkdir dir="${build.tests}" />
		<mkdir dir="${build.javadoc}" />
		<mkdir dir="${build.site}" />
		<mkdir dir="${dist.dir}" />
	</target>

	<target name="build" depends="init" description="Compile and prepare all code">
		<javac source="1.6" target="1.6"
			classpathref="compile.path"
			srcdir="src"
			destdir="${build.classes}"
			includeantruntime="false"
			debug="yes"
			/>
		<!-- Generate CPU list -->
	    <fileset dir="src/${cpu.package}" id="cpu.list">
	      <include name="*.xml"/>
	    </fileset>
		<echo message="cpu.list = ${toString:cpu.list}" />
		<echo file="${build.classes}/${cpu.package}/cpu.txt" message="${toString:cpu.list}" />
		<!-- Non-Java files, such as XML, XSD, META-INF -->
		<copy todir="${build.classes}">
			<fileset dir="src">
				<exclude name="**/*.java" />
			</fileset>
		</copy>
		<javac source="1.6" target="1.6"
			classpathref="compile.path"
			srcdir="test_src"
			destdir="${build.tests}"
			includeantruntime="false"
			debug="yes"
			/>
		<!-- All the resources required for the test suite -->
		<copy todir="${build.tests}">
			<fileset dir="test_resources" />
		</copy>
	</target>

	<target name="test" depends="build" description="Run all JUnit tests">
		<junit printsummary="on">
			<formatter type="xml" />
			<batchtest todir="${build.dir}">
				<fileset dir="${build.tests}" includes="**/*Test*" />
			</batchtest>
			<classpath refid="compile.path" />
		</junit>
	</target>
	
	<target name="javadoc" description="Build javadoc">
		<javadoc sourcepath="src"
		         destdir="${build.javadoc}"
			     classpathref="compile.path"
		         />
	</target>
	
	<target name="site" description="Build site">
		<java classname="com.webcodepro.asm.Main" classpathref="compile.path" fork="true">
			<arg value="--document-cpus" />
			<arg value="ALL" />
			<arg value="--directory" />
			<arg value="${build.site}" />
		</java>
	</target>

	<target name="dist" depends="test,javadoc,site" description="Build distribution JAR">
		<jar destfile="${dist.dir}/${project.name}-${build.version}-${build.id}.jar"
			 basedir="${build.classes}">
			<manifest>
				<attribute name="Main-Class" value="com.webcodepro.asm.Main" />
				<attribute name="Built-By" value="${user.name}"/>
				<attribute name="Implementation-Title" value="${project.name}"/>
				<attribute name="Implementation-Version" value="${build.version}-${build.id}"/>
			</manifest>
		</jar>
		<zip destfile="${dist.dir}/${project.name}-javadoc-${build.version}-${build.id}.zip"
			 basedir="${build.javadoc}"
			 />
		<zip destfile="${dist.dir}/${project.name}-site-${build.version}-${build.id}.zip"
			 basedir="${build.site}"
			 />
		<one-jar destfile="${dist.dir}/${project.name}-cmd-${build.version}-${build.id}.jar">
			<manifest>
				<attribute name="Main-Class" value="com.simontuffs.onejar.Boot" />
				<attribute name="One-Jar-Main-Class" value="com.webcodepro.asm.Main" />
				<attribute name="Built-By" value="${user.name}" />
				<attribute name="Implementation-Title" value="${project.name}" />
				<attribute name="Implementation-Version" value="${build.version}-${build.id}" />
			</manifest>
			<main jar="${dist.dir}/${project.name}-${build.version}-${build.id}.jar" />
			<lib>
				<fileset dir="./lib" includes="*.jar" />
			</lib>
		</one-jar>
	</target>
	
	<target name="dist-clean" depends="clean" description="Delete all distribution JAR files">
		<delete dir="${dist.dir}" />
	</target>
	
	<target name="schemagen" description="Generate XML Schema from JAXB objects">
		<taskdef name="schemagen" classname="com.sun.tools.jxc.SchemaGenTask">
			<classpath>
				<fileset dir="compile_lib">
					<include name="jaxb-*.jar" />
					<include name="jsr173*.jar" />
				</fileset>
			</classpath>
		</taskdef>
		<schemagen srcdir="src/com/webcodepro/asm/definition" destdir="src/META-INF">
		    <schema namespace="https://www.webcodepro.com/schemas/cpu-definition/2.0" file="cpu-definition-2.0.xsd" />
		</schemagen>
	</target>
</project>
