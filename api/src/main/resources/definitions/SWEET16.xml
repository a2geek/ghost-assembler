<?xml version="1.0" encoding="UTF-8"?>
<!-- 
	Definition for SWEET-16 "CPU" as defined by Steve Wozniak.
 -->
<definition xmlns="https://a2geek/schemas/cpu-definition/3.0"
			xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
			xsi:schemaLocation="https://a2geek/schemas/cpu-definition/3.0 ../schemas/cpu-definition-3.0.xsd">

	<name>Sweet 16 CPU</name>
	<overview href="http://en.wikipedia.org/wiki/SWEET16">
		SWEET16 is an interpreted "byte-code" language invented by Steve Wozniak and implemented
		as part of the Integer BASIC ROM in the Apple II computer. It was created because Wozniak
		needed to manipulate 16-bit pointer data in his implementation of BASIC, and the Apple II
		was an 8-bit computer.

		SWEET16 code is executed as if it were running on a (non-existent) 16-bit processor with
		sixteen, internal 16-bit little-endian registers, R0 through R15. Some registers have
		well-defined functions:

		* R0 is the accumulator.
		* R14 is the status register.
		* R13 stores the result of all comparison operations for branch testing.
		* R15 is the program counter.

		The 16 virtual registers, 32 bytes in total, are located in the zero page of the
		Apple II's real, physical memory map (at $00-$1F). The actual SWEET16 interpreter is
		located from $F689 to $F7FC.

		According to Wozniak, the SWEET16 implementation is a model of frugal coding, taking
		up only about 300 bytes in memory. SWEET16 runs about 10 times slower than the equivalent
		native 6502 code.
	</overview>

	<address-space bit-size="16"/>

	<registers>
		<register id="R0" bit-size="16" value="0" groups="Rn">
			<name>SWEET 16 accumulator</name>
		</register>
		<register id="R1" bit-size="16" value="1" groups="Rn">
			<name>Register R1</name>
		</register>
		<register id="R2" bit-size="16" value="2" groups="Rn">
			<name>Register R3</name>
		</register>
		<register id="R3" bit-size="16" value="3" groups="Rn">
			<name>Register R3</name>
		</register>
		<register id="R4" bit-size="16" value="4" groups="Rn">
			<name>Register R4</name>
		</register>
		<register id="R5" bit-size="16" value="5" groups="Rn">
			<name>Register R5</name>
		</register>
		<register id="R6" bit-size="16" value="6" groups="Rn">
			<name>Register R6</name>
		</register>
		<register id="R7" bit-size="16" value="7" groups="Rn">
			<name>Register R7</name>
		</register>
		<register id="R8" bit-size="16" value="8" groups="Rn">
			<name>Register R8</name>
		</register>
		<register id="R9" bit-size="16" value="9" groups="Rn">
			<name>Register R9</name>
		</register>
		<register id="R10" bit-size="16" value="10" groups="Rn">
			<name>Register R10</name>
		</register>
		<register id="R11" bit-size="16" value="11" groups="Rn">
			<name>Register R11</name>
		</register>
		<register id="R12" bit-size="16" value="12" groups="Rn">
			<name>Subroutine return stack pointer</name>
		</register>
		<register id="R13" bit-size="16" value="13" groups="Rn">
			<name>Compare instruction results</name>
		</register>
		<register id="R14" bit-size="16" value="14" groups="Rn">
			<name>Status register</name>
		</register>
		<register id="R15" bit-size="16" value="15" groups="Rn">
			<name>Program counter (PC)</name>
		</register>
	</registers>

	<address-modes>
		<address-mode id="register-immediate">
			<format>Rn,value</format>
			<regex>([rR].+),(.+)</regex>
			<pattern>{R?},?</pattern>
			<code>
				<byte>(opcode&amp;0xf0) | (Rn&amp;0x0f)</byte>
				<byte>value</byte>
				<byte>value>>8</byte>
			</code>
		</address-mode>
		<address-mode id="register-indirect">
			<format>@Rn</format>
			<regex>@([Rr].+)</regex>
			<pattern>@{R?}</pattern>
			<code>
				<byte>(opcode&amp;0xf0) | (Rn&amp;0x0f)</byte>
			</code>
		</address-mode>
		<address-mode id="register-direct">
			<format>Rn</format>
			<regex>([Rr].+)</regex>
			<pattern>{R?}</pattern>
			<code>
				<byte>(opcode&amp;0xf0) | (Rn&amp;0x0f)</byte>
			</code>
		</address-mode>
		<address-mode id="relative-branch">
			<format>addr</format>
			<regex>(.+)</regex>
			<pattern>?</pattern>
			<code>
				<byte>opcode</byte>
				<byte>addr - PC - 2</byte>
			</code>
		</address-mode>
		<address-mode id="none">
			<code>
				<byte>opcode</byte>
			</code>
		</address-mode>
	</address-modes>

	<operations>
		<operation>
			<mnemonic>SET</mnemonic>
			<description>Set constant</description>
			<addressing-mode ref="register-immediate" opcode="0x10"/>
		</operation>
		<operation>
			<mnemonic>LD</mnemonic>
			<description>Load</description>
			<addressing-mode ref="register-direct" opcode="0x20"/>
			<addressing-mode ref="register-indirect" opcode="0x40"/>
		</operation>
		<operation>
			<mnemonic>ST</mnemonic>
			<description>Store</description>
			<addressing-mode ref="register-direct" opcode="0x30"/>
			<addressing-mode ref="register-indirect" opcode="0x50"/>
		</operation>
		<operation>
			<mnemonic>LDD</mnemonic>
			<description>Load double indirect</description>
			<addressing-mode ref="register-indirect" opcode="0x60"/>
		</operation>
		<operation>
			<mnemonic>STD</mnemonic>
			<description>Store double indirect</description>
			<addressing-mode ref="register-indirect" opcode="0x70"/>
		</operation>
		<operation>
			<mnemonic>POP</mnemonic>
			<description>Pop indirect</description>
			<addressing-mode ref="register-indirect" opcode="0x80"/>
		</operation>
		<operation>
			<mnemonic>STP</mnemonic>
			<description>Store POP indirect</description>
			<addressing-mode ref="register-indirect" opcode="0x90"/>
		</operation>
		<operation>
			<mnemonic>ADD</mnemonic>
			<description>Add</description>
			<addressing-mode ref="register-direct" opcode="0xa0"/>
		</operation>
		<operation>
			<mnemonic>SUB</mnemonic>
			<description>Subtract</description>
			<addressing-mode ref="register-direct" opcode="0xb0"/>
		</operation>
		<operation>
			<mnemonic>POPD</mnemonic>
			<description>Pop double indirect</description>
			<addressing-mode ref="register-indirect" opcode="0xc0"/>
		</operation>
		<operation>
			<mnemonic>CPR</mnemonic>
			<description>Compare</description>
			<addressing-mode ref="register-direct" opcode="0xd0"/>
		</operation>
		<operation>
			<mnemonic>INR</mnemonic>
			<description>Increment</description>
			<addressing-mode ref="register-direct" opcode="0xe0"/>
		</operation>
		<operation>
			<mnemonic>DCR</mnemonic>
			<description>Decrement</description>
			<addressing-mode ref="register-direct" opcode="0xf0"/>
		</operation>
		<operation>
			<mnemonic>RTN</mnemonic>
			<description>Return to 6502 mode</description>
			<addressing-mode ref="none" opcode="0x00"/>
		</operation>
		<operation>
			<mnemonic>BR</mnemonic>
			<description>Branch always</description>
			<addressing-mode ref="relative-branch" opcode="0x01"/>
		</operation>
		<operation>
			<mnemonic>BNC</mnemonic>
			<description>Branch if no carry</description>
			<addressing-mode ref="relative-branch" opcode="0x02"/>
		</operation>
		<operation>
			<mnemonic>BC</mnemonic>
			<description>Branch if carry</description>
			<addressing-mode ref="relative-branch" opcode="0x03"/>
		</operation>
		<operation>
			<mnemonic>BP</mnemonic>
			<description>Branch if plus</description>
			<addressing-mode ref="relative-branch" opcode="0x04"/>
		</operation>
		<operation>
			<mnemonic>BM</mnemonic>
			<description>Branch if minus</description>
			<addressing-mode ref="relative-branch" opcode="0x05"/>
		</operation>
		<operation>
			<mnemonic>BZ</mnemonic>
			<description>Branch if zero</description>
			<addressing-mode ref="relative-branch" opcode="0x06"/>
		</operation>
		<operation>
			<mnemonic>BNZ</mnemonic>
			<description>Branch if nonzero</description>
			<addressing-mode ref="relative-branch" opcode="0x07"/>
		</operation>
		<operation>
			<mnemonic>BM1</mnemonic>
			<description>Branch if minus 1</description>
			<addressing-mode ref="relative-branch" opcode="0x08"/>
		</operation>
		<operation>
			<mnemonic>BNM1</mnemonic>
			<description>Branch if not minus 1</description>
			<addressing-mode ref="relative-branch" opcode="0x09"/>
		</operation>
		<operation>
			<mnemonic>BK</mnemonic>
			<description>Break</description>
			<addressing-mode ref="none" opcode="0x0a"/>
		</operation>
		<operation>
			<mnemonic>RS</mnemonic>
			<description>Return from subroutine</description>
			<addressing-mode ref="none" opcode="0x0b"/>
		</operation>
		<operation>
			<mnemonic>BS</mnemonic>
			<description>Branch to subroutine</description>
			<addressing-mode ref="relative-branch" opcode="0x0c"/>
		</operation>
	</operations>
	
</definition>